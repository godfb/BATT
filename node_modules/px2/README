PX2 - a backbone replacement
--------------------------------

PX2 is a backbone replacement with a more consistent design:

   - objects are both objects and containers, of type Class

   - containers can be specialized so they only contain a specific
     type of object

   - all derived Classes have named getters and setters

   - views are of type Class
   
   - objects that 'contain' (either by using 'set' or 'add' methods)
     other objects are passed messages from the objects they contain

Installation
------------

    npm install --save px2
    bower install --save px2

Class methods
-------------

     this.create(name, value, silent):

       Creates a new member variable called 'name' with initial value
       of 'value'. Also creates named getters/setters, this.name() and
       this.name(value). Sends 'create' and 'create:$name' messages
       with value as event.value unless silent is true.

     this.set(name, value, silent)

       Standard setter for Class objects. Sends "change" and
       "change:$name" events when called.  The value of this.name() is
       the original value and the event.value (passed as the first
       part of 'change' trigger handler) is the value that this.name()
       will be set to after the trigger handler returns, unless silent
       is true.

     this.get(name, silent)

       Standard getter for Class objects, sends 'get' and 'get:$name'
       messages, unless silent is true.

     this.add(value, silent)

       Add value to the collection if it is not already in the
       collection and sends "add" and "change" messages, with
       event.target being the value, unless silent is true.
       
     this.push(value, silent)

       Add value to the head of the collection and sends "add" and
       "change" messages, with event.target being the value, unless
       silent is true. Much faster than add, since it doesn't have to
       scan the entire storage looking for a duplicate.
       
     this.remove(value, silent)

       Remove value from the collection if it has been added to it
       using add/push and sends "remove" and "change" messages if it
       was removed, unless silent is true. Returns true if the object
       was removed, false otherwise.

     this.at(index)

       Return an element in the collection located at index.  Throws
       Error if index is out of range.
       
     this.length:

       The number of elements contained in the object.

     this.clear(silent)

       Remove all items from the collection and sets length to 0;
       sends "change" and "clear" message, unles silent is true.

     this.on(message, function (event) { ... }, self)

       Intercept message with handler, setting this to self during
       call of handler.  If 'self' is omitted, 'this' is used.
       'event' contains event.value, which is the value passed to
       trigger, and event.target which will be the object that
       triggered the message, in most cases 'this'.

       If the event handler returns true, messages will continue to
       propagate up the containment chain, else it will stop at the
       handling object.

     this.once(message, function (event) { ... }, self)

       Like this.on, but the handler is only called once, after which
       it is removed from the handler action table.

     this.trigger(message, value)

       Send the message to this, and then all containing parents,
       recursively up the containment tree.  Propagation stops when
       the message is intercepted and handled.
       // TODO: continue propagation if handler returns true?

     this.each(function (value) ...)

       Side effects only iteration over elements.

     this.map(function (value) ...)

       Returns an array of returned values from function.

     this.find(object || function (value) ...)

       Find a specific object in the collection.  If the argument is
       an object, === is used, if a function it is called with each
       element of the collection until it returns true. Returns the
       object, if it is found.

     this.sort(fun, silent)

        Destructively sorts the internal storage array using fun,
        returns 'this' so you can chain with map. Sends 'change' and
        'sorted' events, unless silent is true.

Events
------

      An event is passed to a trigger handler.  An event includes the
      value and target fields; value is the value passed to
      set/add/push/etc, and target is the object that initiated the
      event.


Example of defining and using a Class as an object and a container
------------------------------------------------------------------

    var Class = require("px2").Class;
    
    // Declare object class data
    var Point = {
        // Optional, but good for debugging and containers
        type: 'Point'

        // optional, create members and set default values 
        defaults: {
            system: "cartesian"
        },
    
        // Constructor, called during instatiation
        init: function (x, y) {
            this.create('x', x);
            this.create('y', y);
        }
    
        // A random method
        toString: function () {
            return "x: " + this.x() + ", y: " + this.y() + " " + this.system();
        }
    }
    
    // Delcare a container
    var Points = {
        type: 'Points',
    
        // This container contatins type...
        contains: 'Point'
    
        init: function () {
            this.create('currentPoint'); // undefined initially
    
            this.on('add', function (e) {
                // Use a named setter to set the current value of member 'currentPoint'.
                // e is passed to all trigger functions and it contains:
                //          e.value: the value that was added/removed/updated/etc
                //          e.target: the object that was updated, in this case it would be 'this'
                this.currentPoint(e.value);
            });
            this.on('remove', function (e) {
                if(e.value === this.currentPoint()) {
                    this.currenPoint(undefined);
                }
            });
        }
    }
    
    // Instantiate a MyObject
    var points = new Class(Points);
    
    points.add(new Class(Point, 100, 200));
    
    var point = points.at(0);
    
    var xs = point.map(function (point) {
        return point.x();
    }); // => [100]
    
Views
-----

Views are derived Class and contain all features and methods that
Class(es) give.

View example
------------

    var View = require("px2").View;
    
    var PointsView = {
        // optional, but handy for debugging and is the default class if
        // className is not defined (below)
        type: 'PointsView',
    
        // optional, sets default tag name of this.$el, else is "div"
        tagName: "span",  
    
        // optional, sets default class of this.$el, else is the value of 'type'
        className: "",
    
        // optional, name for this.model. In this case, you could use
        // this.points to reference your model. The model is not
        // enclosed in the object, so messages from the model are
        // not propagated into this View.
        model: 'points',

        // optional css initial style, using jquery syntax
        style: {
               "font-weight": "bold"
        }
    
        // events, just like backbone
        events: {
            'click': function (e) {
                     alert(this.message()); // 'this' is bound for you automagically
            }
        }
    
        // constructor is passed the model as the first argument (not
        // optional), and any other arguments passed after that
        // model can also be referenced as this.model, or this.points if using
        // the 'model' option above.
        init: function (model, value) {
              this.create('value', value);
              this.create('message', "Hello World!");
              this.points.on('add', this.render); // 'this' is bound automagically
        }
    
        // render, which if you don't provide a default is given that
        // just returns this.$el
        render: {
                return this.$el.html(this.points.map(function (v) {
                    return $('<div>').text(v.toString());
                }));
        }
    }

    var points = new Class(Points);

    // A view constructor is similar to a Class constructor, but the
    // second argument to the call to new View is the model (generally
    // a Class) for the View.
    var pointsView = new View(MyView, points, 1);
    $('document').ready(function () {
        $('body').html(pointsView.render());
    });


WTF is this written in?
-----------------------

PX2 is written in Parenscript: https://github.com/vsedach/Parenscript
To build from source you need use ps2js: https://github.com/burtonsamograd/ps2js

--
Burton Samograd <burton.samograd@gmail.com>
2015